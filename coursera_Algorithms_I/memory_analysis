public class MysteryBox {
	                      --> Overhead of the object: 16 bytes

    private int x0,       --> 4 bytes
                x1,       --> 4 bytes
                x2;       --> 4 bytes
    private double y0,    --> 8 bytes
    			   y1,    --> 8 bytes
    			   y2;    --> 8 bytes
    private long z0,      --> 8 bytes
    			 z1;      --> 8 bytes

    private boolean[] a = --> Reference to array: 8 bytes (em mÃ¡quina de 64 bits)
    	new boolean[240]; --> Array itself: 240*1 + 24 (overhead)

    ...

                          --> Padding: 4 bytes
                              The sum of memory above: 16 + 3*4 + 5*8 + 8 + 240*1 + 24 = 340 bytes
                              340/8 = 42.5. In order to make the entire object memory a multiple of 8, must sum 4 bytes (padding)

                          --> Total memory: 344 bytes
}

-----------------------------------------------------------------
Consider an object of type GenericMysteryBox<Double> that stores N items of type Double.

The correct answer is:~72N

public class GenericMysteryBox<Item> {        //       16 (object overhead)
    private Node first;                       //        8 (reference)

    private class Node {                      //       16 (object overhead)
                                              //        8 (inner class overhead)
        private Item item;                    //        8 (reference to Double)
                                              //       24 (Double)
        private Node next;                    //        8 (reference)
        private Node prev;                    //        8 (reference)
    }                                             -------
                                                 24 + 72N
    ...
}


Using the 64-bit memory cost model from the lecture, how many bytes does it use as a function of N?
Include all memory referenced by the object and use tilde notation to simplify your answer.
For example, enter ~1N if the number of bytes is 1N + 32.